/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain;


import com.ymm.back.domain.tables.Databasechangeloglock;
import com.ymm.back.domain.tables.FileStorage;
import com.ymm.back.domain.tables.Message;
import com.ymm.back.domain.tables.Project;
import com.ymm.back.domain.tables.ProjectMember;
import com.ymm.back.domain.tables.User;
import com.ymm.back.domain.tables.records.DatabasechangeloglockRecord;
import com.ymm.back.domain.tables.records.FileStorageRecord;
import com.ymm.back.domain.tables.records.MessageRecord;
import com.ymm.back.domain.tables.records.ProjectMemberRecord;
import com.ymm.back.domain.tables.records.ProjectRecord;
import com.ymm.back.domain.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>hwant</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<FileStorageRecord, Integer> IDENTITY_FILE_STORAGE = Identities0.IDENTITY_FILE_STORAGE;
    public static final Identity<MessageRecord, Integer> IDENTITY_MESSAGE = Identities0.IDENTITY_MESSAGE;
    public static final Identity<ProjectRecord, Integer> IDENTITY_PROJECT = Identities0.IDENTITY_PROJECT;
    public static final Identity<ProjectMemberRecord, Integer> IDENTITY_PROJECT_MEMBER = Identities0.IDENTITY_PROJECT_MEMBER;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DatabasechangeloglockRecord> KEY_DATABASECHANGELOGLOCK_PRIMARY = UniqueKeys0.KEY_DATABASECHANGELOGLOCK_PRIMARY;
    public static final UniqueKey<FileStorageRecord> KEY_FILE_STORAGE_PRIMARY = UniqueKeys0.KEY_FILE_STORAGE_PRIMARY;
    public static final UniqueKey<MessageRecord> KEY_MESSAGE_PRIMARY = UniqueKeys0.KEY_MESSAGE_PRIMARY;
    public static final UniqueKey<ProjectRecord> KEY_PROJECT_PRIMARY = UniqueKeys0.KEY_PROJECT_PRIMARY;
    public static final UniqueKey<ProjectMemberRecord> KEY_PROJECT_MEMBER_PRIMARY = UniqueKeys0.KEY_PROJECT_MEMBER_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FileStorageRecord, MessageRecord> MESSAGE_FILE_FK = ForeignKeys0.MESSAGE_FILE_FK;
    public static final ForeignKey<MessageRecord, ProjectMemberRecord> PROJECT_MEMBER_MESSAGE_FK = ForeignKeys0.PROJECT_MEMBER_MESSAGE_FK;
    public static final ForeignKey<MessageRecord, ProjectRecord> PROJECT_MESSAGE_FK = ForeignKeys0.PROJECT_MESSAGE_FK;
    public static final ForeignKey<ProjectRecord, UserRecord> PROJECT_USER_FK = ForeignKeys0.PROJECT_USER_FK;
    public static final ForeignKey<ProjectMemberRecord, UserRecord> PROJECT_MEMBER_FK = ForeignKeys0.PROJECT_MEMBER_FK;
    public static final ForeignKey<ProjectMemberRecord, ProjectRecord> USER_MEMBER_FK = ForeignKeys0.USER_MEMBER_FK;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<FileStorageRecord, Integer> IDENTITY_FILE_STORAGE = Internal.createIdentity(FileStorage.FILE_STORAGE, FileStorage.FILE_STORAGE.ID);
        public static Identity<MessageRecord, Integer> IDENTITY_MESSAGE = Internal.createIdentity(Message.MESSAGE, Message.MESSAGE.ID);
        public static Identity<ProjectRecord, Integer> IDENTITY_PROJECT = Internal.createIdentity(Project.PROJECT, Project.PROJECT.ID);
        public static Identity<ProjectMemberRecord, Integer> IDENTITY_PROJECT_MEMBER = Internal.createIdentity(ProjectMember.PROJECT_MEMBER, ProjectMember.PROJECT_MEMBER.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<DatabasechangeloglockRecord> KEY_DATABASECHANGELOGLOCK_PRIMARY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, "KEY_DATABASECHANGELOGLOCK_PRIMARY", new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
        public static final UniqueKey<FileStorageRecord> KEY_FILE_STORAGE_PRIMARY = Internal.createUniqueKey(FileStorage.FILE_STORAGE, "KEY_file_storage_PRIMARY", new TableField[] { FileStorage.FILE_STORAGE.ID }, true);
        public static final UniqueKey<MessageRecord> KEY_MESSAGE_PRIMARY = Internal.createUniqueKey(Message.MESSAGE, "KEY_message_PRIMARY", new TableField[] { Message.MESSAGE.ID }, true);
        public static final UniqueKey<ProjectRecord> KEY_PROJECT_PRIMARY = Internal.createUniqueKey(Project.PROJECT, "KEY_project_PRIMARY", new TableField[] { Project.PROJECT.ID }, true);
        public static final UniqueKey<ProjectMemberRecord> KEY_PROJECT_MEMBER_PRIMARY = Internal.createUniqueKey(ProjectMember.PROJECT_MEMBER, "KEY_project_member_PRIMARY", new TableField[] { ProjectMember.PROJECT_MEMBER.ID }, true);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_user_PRIMARY", new TableField[] { User.USER.ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<FileStorageRecord, MessageRecord> MESSAGE_FILE_FK = Internal.createForeignKey(Keys.KEY_MESSAGE_PRIMARY, FileStorage.FILE_STORAGE, "message_file_fk", new TableField[] { FileStorage.FILE_STORAGE.MESSAGE_FK }, true);
        public static final ForeignKey<MessageRecord, ProjectMemberRecord> PROJECT_MEMBER_MESSAGE_FK = Internal.createForeignKey(Keys.KEY_PROJECT_MEMBER_PRIMARY, Message.MESSAGE, "project_member_message_fk", new TableField[] { Message.MESSAGE.PROJECT_MEMBER_FK }, true);
        public static final ForeignKey<MessageRecord, ProjectRecord> PROJECT_MESSAGE_FK = Internal.createForeignKey(Keys.KEY_PROJECT_PRIMARY, Message.MESSAGE, "project_message_fk", new TableField[] { Message.MESSAGE.PROJECT_FK }, true);
        public static final ForeignKey<ProjectRecord, UserRecord> PROJECT_USER_FK = Internal.createForeignKey(Keys.KEY_USER_PRIMARY, Project.PROJECT, "project_user_fk", new TableField[] { Project.PROJECT.USER_FK }, true);
        public static final ForeignKey<ProjectMemberRecord, UserRecord> PROJECT_MEMBER_FK = Internal.createForeignKey(Keys.KEY_USER_PRIMARY, ProjectMember.PROJECT_MEMBER, "project_member_fk", new TableField[] { ProjectMember.PROJECT_MEMBER.USER_FK }, true);
        public static final ForeignKey<ProjectMemberRecord, ProjectRecord> USER_MEMBER_FK = Internal.createForeignKey(Keys.KEY_PROJECT_PRIMARY, ProjectMember.PROJECT_MEMBER, "user_member_fk", new TableField[] { ProjectMember.PROJECT_MEMBER.PROJECT_FK }, true);
    }
}

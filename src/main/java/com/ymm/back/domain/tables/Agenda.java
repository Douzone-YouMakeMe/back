/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain.tables;


import com.ymm.back.domain.DefaultSchema;
import com.ymm.back.domain.Indexes;
import com.ymm.back.domain.Keys;
import com.ymm.back.domain.tables.records.AgendaRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Agenda extends TableImpl<AgendaRecord> {

    private static final long serialVersionUID = -750291111;

    /**
     * The reference instance of <code>agenda</code>
     */
    public static final Agenda AGENDA = new Agenda();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgendaRecord> getRecordType() {
        return AgendaRecord.class;
    }

    /**
     * The column <code>agenda.id</code>.
     */
    public final TableField<AgendaRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>agenda.member_id</code>.
     */
    public final TableField<AgendaRecord, Integer> MEMBER_ID = createField(DSL.name("member_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>agenda.project_id</code>.
     */
    public final TableField<AgendaRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>agenda.create_time</code>.
     */
    public final TableField<AgendaRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>agenda.update_time</code>.
     */
    public final TableField<AgendaRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>agenda.name</code>.
     */
    public final TableField<AgendaRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>agenda.description</code>.
     */
    public final TableField<AgendaRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>agenda.finish_time</code>.
     */
    public final TableField<AgendaRecord, LocalDateTime> FINISH_TIME = createField(DSL.name("finish_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>agenda.result</code>.
     */
    public final TableField<AgendaRecord, String> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>agenda.status</code>.
     */
    public final TableField<AgendaRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>agenda.item</code>.
     */
    public final TableField<AgendaRecord, String> ITEM = createField(DSL.name("item"), org.jooq.impl.SQLDataType.VARCHAR(60), this, "");

    /**
     * Create a <code>agenda</code> table reference
     */
    public Agenda() {
        this(DSL.name("agenda"), null);
    }

    /**
     * Create an aliased <code>agenda</code> table reference
     */
    public Agenda(String alias) {
        this(DSL.name(alias), AGENDA);
    }

    /**
     * Create an aliased <code>agenda</code> table reference
     */
    public Agenda(Name alias) {
        this(alias, AGENDA);
    }

    private Agenda(Name alias, Table<AgendaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Agenda(Name alias, Table<AgendaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Agenda(Table<O> child, ForeignKey<O, AgendaRecord> key) {
        super(child, key, AGENDA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AGENDA_FK_AGENDA_MEMBER1_IDX, Indexes.AGENDA_FK_AGENDA_PROJECT1_IDX);
    }

    @Override
    public Identity<AgendaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AGENDA;
    }

    @Override
    public UniqueKey<AgendaRecord> getPrimaryKey() {
        return Keys.KEY_AGENDA_PRIMARY;
    }

    @Override
    public List<UniqueKey<AgendaRecord>> getKeys() {
        return Arrays.<UniqueKey<AgendaRecord>>asList(Keys.KEY_AGENDA_PRIMARY);
    }

    @Override
    public List<ForeignKey<AgendaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AgendaRecord, ?>>asList(Keys.FK_AGENDA_MEMBER1, Keys.FK_AGENDA_PROJECT1);
    }

    public ProjectMember projectMember() {
        return new ProjectMember(this, Keys.FK_AGENDA_MEMBER1);
    }

    public Project project() {
        return new Project(this, Keys.FK_AGENDA_PROJECT1);
    }

    @Override
    public Agenda as(String alias) {
        return new Agenda(DSL.name(alias), this);
    }

    @Override
    public Agenda as(Name alias) {
        return new Agenda(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Agenda rename(String name) {
        return new Agenda(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Agenda rename(Name name) {
        return new Agenda(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Integer, LocalDateTime, LocalDateTime, String, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}

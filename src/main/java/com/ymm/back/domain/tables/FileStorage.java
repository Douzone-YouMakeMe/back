/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain.tables;


import com.ymm.back.domain.Douzone;
import com.ymm.back.domain.Indexes;
import com.ymm.back.domain.Keys;
import com.ymm.back.domain.tables.records.FileStorageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileStorage extends TableImpl<FileStorageRecord> {

    private static final long serialVersionUID = -1162580816;

    /**
     * The reference instance of <code>douzone.file_storage</code>
     */
    public static final FileStorage FILE_STORAGE = new FileStorage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileStorageRecord> getRecordType() {
        return FileStorageRecord.class;
    }

    /**
     * The column <code>douzone.file_storage.id</code>.
     */
    public final TableField<FileStorageRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>douzone.file_storage.message_id</code>.
     */
    public final TableField<FileStorageRecord, Integer> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>douzone.file_storage.url</code>.
     */
    public final TableField<FileStorageRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>douzone.file_storage.filename</code>.
     */
    public final TableField<FileStorageRecord, String> FILENAME = createField(DSL.name("filename"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>douzone.file_storage.create_time</code>.
     */
    public final TableField<FileStorageRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>douzone.file_storage.update_time</code>.
     */
    public final TableField<FileStorageRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>douzone.file_storage</code> table reference
     */
    public FileStorage() {
        this(DSL.name("file_storage"), null);
    }

    /**
     * Create an aliased <code>douzone.file_storage</code> table reference
     */
    public FileStorage(String alias) {
        this(DSL.name(alias), FILE_STORAGE);
    }

    /**
     * Create an aliased <code>douzone.file_storage</code> table reference
     */
    public FileStorage(Name alias) {
        this(alias, FILE_STORAGE);
    }

    private FileStorage(Name alias, Table<FileStorageRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileStorage(Name alias, Table<FileStorageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FileStorage(Table<O> child, ForeignKey<O, FileStorageRecord> key) {
        super(child, key, FILE_STORAGE);
    }

    @Override
    public Schema getSchema() {
        return Douzone.DOUZONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FILE_STORAGE_FK_FILE_STORAGE_MESSAGE1_IDX);
    }

    @Override
    public Identity<FileStorageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FILE_STORAGE;
    }

    @Override
    public UniqueKey<FileStorageRecord> getPrimaryKey() {
        return Keys.KEY_FILE_STORAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<FileStorageRecord>> getKeys() {
        return Arrays.<UniqueKey<FileStorageRecord>>asList(Keys.KEY_FILE_STORAGE_PRIMARY);
    }

    @Override
    public List<ForeignKey<FileStorageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FileStorageRecord, ?>>asList(Keys.FK_FILE_STORAGE_MESSAGE1);
    }

    public Message message() {
        return new Message(this, Keys.FK_FILE_STORAGE_MESSAGE1);
    }

    @Override
    public FileStorage as(String alias) {
        return new FileStorage(DSL.name(alias), this);
    }

    @Override
    public FileStorage as(Name alias) {
        return new FileStorage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileStorage rename(String name) {
        return new FileStorage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileStorage rename(Name name) {
        return new FileStorage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

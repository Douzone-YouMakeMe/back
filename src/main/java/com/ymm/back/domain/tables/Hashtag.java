/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain.tables;


import com.ymm.back.domain.DefaultSchema;
import com.ymm.back.domain.Indexes;
import com.ymm.back.domain.Keys;
import com.ymm.back.domain.tables.records.HashtagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hashtag extends TableImpl<HashtagRecord> {

    private static final long serialVersionUID = -1641532960;

    /**
     * The reference instance of <code>hashtag</code>
     */
    public static final Hashtag HASHTAG = new Hashtag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HashtagRecord> getRecordType() {
        return HashtagRecord.class;
    }

    /**
     * The column <code>hashtag.id</code>.
     */
    public final TableField<HashtagRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>hashtag.work_id</code>.
     */
    public final TableField<HashtagRecord, Integer> WORK_ID = createField(DSL.name("work_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>hashtag.name</code>.
     */
    public final TableField<HashtagRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>hashtag.create_time</code>.
     */
    public final TableField<HashtagRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>hashtag.update_time</code>.
     */
    public final TableField<HashtagRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>hashtag</code> table reference
     */
    public Hashtag() {
        this(DSL.name("hashtag"), null);
    }

    /**
     * Create an aliased <code>hashtag</code> table reference
     */
    public Hashtag(String alias) {
        this(DSL.name(alias), HASHTAG);
    }

    /**
     * Create an aliased <code>hashtag</code> table reference
     */
    public Hashtag(Name alias) {
        this(alias, HASHTAG);
    }

    private Hashtag(Name alias, Table<HashtagRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hashtag(Name alias, Table<HashtagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Hashtag(Table<O> child, ForeignKey<O, HashtagRecord> key) {
        super(child, key, HASHTAG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HASHTAG_FK_HASHTAG_WORK1_IDX);
    }

    @Override
    public Identity<HashtagRecord, Integer> getIdentity() {
        return Keys.IDENTITY_HASHTAG;
    }

    @Override
    public UniqueKey<HashtagRecord> getPrimaryKey() {
        return Keys.KEY_HASHTAG_PRIMARY;
    }

    @Override
    public List<UniqueKey<HashtagRecord>> getKeys() {
        return Arrays.<UniqueKey<HashtagRecord>>asList(Keys.KEY_HASHTAG_PRIMARY);
    }

    @Override
    public List<ForeignKey<HashtagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HashtagRecord, ?>>asList(Keys.FK_HASHTAG_WORK1);
    }

    public Work work() {
        return new Work(this, Keys.FK_HASHTAG_WORK1);
    }

    @Override
    public Hashtag as(String alias) {
        return new Hashtag(DSL.name(alias), this);
    }

    @Override
    public Hashtag as(Name alias) {
        return new Hashtag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hashtag rename(String name) {
        return new Hashtag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hashtag rename(Name name) {
        return new Hashtag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

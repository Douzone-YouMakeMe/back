/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain.tables;


import com.ymm.back.domain.Hwant;
import com.ymm.back.domain.Keys;
import com.ymm.back.domain.tables.records.ProjectRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Project extends TableImpl<ProjectRecord> {

    private static final long serialVersionUID = -1772656239;

    /**
     * The reference instance of <code>hwant.project</code>
     */
    public static final Project PROJECT = new Project();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectRecord> getRecordType() {
        return ProjectRecord.class;
    }

    /**
     * The column <code>hwant.project.id</code>.
     */
    public final TableField<ProjectRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>hwant.project.name</code>.
     */
    public final TableField<ProjectRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>hwant.project.contents</code>.
     */
    public final TableField<ProjectRecord, String> CONTENTS = createField(DSL.name("contents"), org.jooq.impl.SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * The column <code>hwant.project.view_count</code>.
     */
    public final TableField<ProjectRecord, Integer> VIEW_COUNT = createField(DSL.name("view_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>hwant.project.thumbnail</code>.
     */
    public final TableField<ProjectRecord, String> THUMBNAIL = createField(DSL.name("thumbnail"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>hwant.project.description</code>.
     */
    public final TableField<ProjectRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>hwant.project.created_at</code>.
     */
    public final TableField<ProjectRecord, String> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>hwant.project.updated_at</code>.
     */
    public final TableField<ProjectRecord, String> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>hwant.project.finished_at</code>.
     */
    public final TableField<ProjectRecord, String> FINISHED_AT = createField(DSL.name("finished_at"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>hwant.project.user_fk</code>.
     */
    public final TableField<ProjectRecord, Integer> USER_FK = createField(DSL.name("user_fk"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>hwant.project.authority</code>.
     */
    public final TableField<ProjectRecord, String> AUTHORITY = createField(DSL.name("authority"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>hwant.project</code> table reference
     */
    public Project() {
        this(DSL.name("project"), null);
    }

    /**
     * Create an aliased <code>hwant.project</code> table reference
     */
    public Project(String alias) {
        this(DSL.name(alias), PROJECT);
    }

    /**
     * Create an aliased <code>hwant.project</code> table reference
     */
    public Project(Name alias) {
        this(alias, PROJECT);
    }

    private Project(Name alias, Table<ProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private Project(Name alias, Table<ProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Project(Table<O> child, ForeignKey<O, ProjectRecord> key) {
        super(child, key, PROJECT);
    }

    @Override
    public Schema getSchema() {
        return Hwant.HWANT;
    }

    @Override
    public Identity<ProjectRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECT;
    }

    @Override
    public UniqueKey<ProjectRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProjectRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectRecord>>asList(Keys.KEY_PROJECT_PRIMARY);
    }

    @Override
    public List<ForeignKey<ProjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectRecord, ?>>asList(Keys.PROJECT_USER_FK);
    }

    public User user() {
        return new User(this, Keys.PROJECT_USER_FK);
    }

    @Override
    public Project as(String alias) {
        return new Project(DSL.name(alias), this);
    }

    @Override
    public Project as(Name alias) {
        return new Project(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(String name) {
        return new Project(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(Name name) {
        return new Project(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, Integer, String, String, String, String, String, Integer, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain.tables;


import com.ymm.back.domain.Hwant;
import com.ymm.back.domain.Keys;
import com.ymm.back.domain.tables.records.ProjectMemberRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectMember extends TableImpl<ProjectMemberRecord> {

    private static final long serialVersionUID = 1890346311;

    /**
     * The reference instance of <code>hwant.project_member</code>
     */
    public static final ProjectMember PROJECT_MEMBER = new ProjectMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectMemberRecord> getRecordType() {
        return ProjectMemberRecord.class;
    }

    /**
     * The column <code>hwant.project_member.id</code>.
     */
    public final TableField<ProjectMemberRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>hwant.project_member.name</code>.
     */
    public final TableField<ProjectMemberRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>hwant.project_member.user_name</code>.
     */
    public final TableField<ProjectMemberRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>hwant.project_member.applied_position</code>.
     */
    public final TableField<ProjectMemberRecord, String> APPLIED_POSITION = createField(DSL.name("applied_position"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>hwant.project_member.comments</code>.
     */
    public final TableField<ProjectMemberRecord, String> COMMENTS = createField(DSL.name("comments"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>hwant.project_member.portfolio_file</code>.
     */
    public final TableField<ProjectMemberRecord, String> PORTFOLIO_FILE = createField(DSL.name("portfolio_file"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>hwant.project_member.portfolio_url</code>.
     */
    public final TableField<ProjectMemberRecord, String> PORTFOLIO_URL = createField(DSL.name("portfolio_url"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>hwant.project_member.description</code>.
     */
    public final TableField<ProjectMemberRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>hwant.project_member.auth</code>.
     */
    public final TableField<ProjectMemberRecord, String> AUTH = createField(DSL.name("auth"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>hwant.project_member.role_id</code>.
     */
    public final TableField<ProjectMemberRecord, Integer> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>hwant.project_member.websocket</code>.
     */
    public final TableField<ProjectMemberRecord, String> WEBSOCKET = createField(DSL.name("websocket"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>hwant.project_member.user_fk</code>.
     */
    public final TableField<ProjectMemberRecord, Integer> USER_FK = createField(DSL.name("user_fk"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>hwant.project_member.project_fk</code>.
     */
    public final TableField<ProjectMemberRecord, Integer> PROJECT_FK = createField(DSL.name("project_fk"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>hwant.project_member</code> table reference
     */
    public ProjectMember() {
        this(DSL.name("project_member"), null);
    }

    /**
     * Create an aliased <code>hwant.project_member</code> table reference
     */
    public ProjectMember(String alias) {
        this(DSL.name(alias), PROJECT_MEMBER);
    }

    /**
     * Create an aliased <code>hwant.project_member</code> table reference
     */
    public ProjectMember(Name alias) {
        this(alias, PROJECT_MEMBER);
    }

    private ProjectMember(Name alias, Table<ProjectMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectMember(Name alias, Table<ProjectMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ProjectMember(Table<O> child, ForeignKey<O, ProjectMemberRecord> key) {
        super(child, key, PROJECT_MEMBER);
    }

    @Override
    public Schema getSchema() {
        return Hwant.HWANT;
    }

    @Override
    public Identity<ProjectMemberRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECT_MEMBER;
    }

    @Override
    public UniqueKey<ProjectMemberRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_MEMBER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProjectMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectMemberRecord>>asList(Keys.KEY_PROJECT_MEMBER_PRIMARY);
    }

    @Override
    public List<ForeignKey<ProjectMemberRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectMemberRecord, ?>>asList(Keys.PROJECT_MEMBER_FK, Keys.USER_MEMBER_FK);
    }

    public User user() {
        return new User(this, Keys.PROJECT_MEMBER_FK);
    }

    public Project project() {
        return new Project(this, Keys.USER_MEMBER_FK);
    }

    @Override
    public ProjectMember as(String alias) {
        return new ProjectMember(DSL.name(alias), this);
    }

    @Override
    public ProjectMember as(Name alias) {
        return new ProjectMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMember rename(String name) {
        return new ProjectMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMember rename(Name name) {
        return new ProjectMember(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, String, String, String, String, String, Integer, String, Integer, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}

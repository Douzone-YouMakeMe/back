/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain.tables;


import com.ymm.back.domain.DefaultSchema;
import com.ymm.back.domain.Indexes;
import com.ymm.back.domain.Keys;
import com.ymm.back.domain.tables.records.VotingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Voting extends TableImpl<VotingRecord> {

    private static final long serialVersionUID = -580879767;

    /**
     * The reference instance of <code>voting</code>
     */
    public static final Voting VOTING = new Voting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VotingRecord> getRecordType() {
        return VotingRecord.class;
    }

    /**
     * The column <code>voting.id</code>.
     */
    public final TableField<VotingRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>voting.agenda_id</code>.
     */
    public final TableField<VotingRecord, Integer> AGENDA_ID = createField(DSL.name("agenda_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>voting.member_id</code>.
     */
    public final TableField<VotingRecord, Integer> MEMBER_ID = createField(DSL.name("member_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>voting.create_time</code>.
     */
    public final TableField<VotingRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>voting.update_time</code>.
     */
    public final TableField<VotingRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>voting.choice</code>.
     */
    public final TableField<VotingRecord, String> CHOICE = createField(DSL.name("choice"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * Create a <code>voting</code> table reference
     */
    public Voting() {
        this(DSL.name("voting"), null);
    }

    /**
     * Create an aliased <code>voting</code> table reference
     */
    public Voting(String alias) {
        this(DSL.name(alias), VOTING);
    }

    /**
     * Create an aliased <code>voting</code> table reference
     */
    public Voting(Name alias) {
        this(alias, VOTING);
    }

    private Voting(Name alias, Table<VotingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Voting(Name alias, Table<VotingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Voting(Table<O> child, ForeignKey<O, VotingRecord> key) {
        super(child, key, VOTING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VOTING_FK_VOTING_AGENDA1_IDX, Indexes.VOTING_FK_VOTING_MEMBER1_IDX);
    }

    @Override
    public Identity<VotingRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VOTING;
    }

    @Override
    public UniqueKey<VotingRecord> getPrimaryKey() {
        return Keys.KEY_VOTING_PRIMARY;
    }

    @Override
    public List<UniqueKey<VotingRecord>> getKeys() {
        return Arrays.<UniqueKey<VotingRecord>>asList(Keys.KEY_VOTING_PRIMARY);
    }

    @Override
    public List<ForeignKey<VotingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VotingRecord, ?>>asList(Keys.FK_VOTING_AGENDA1, Keys.FK_VOTING_MEMBER1);
    }

    public Agenda agenda() {
        return new Agenda(this, Keys.FK_VOTING_AGENDA1);
    }

    public ProjectMember projectMember() {
        return new ProjectMember(this, Keys.FK_VOTING_MEMBER1);
    }

    @Override
    public Voting as(String alias) {
        return new Voting(DSL.name(alias), this);
    }

    @Override
    public Voting as(Name alias) {
        return new Voting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Voting rename(String name) {
        return new Voting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Voting rename(Name name) {
        return new Voting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

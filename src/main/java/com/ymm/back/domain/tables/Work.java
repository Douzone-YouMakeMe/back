/*
 * This file is generated by jOOQ.
 */
package com.ymm.back.domain.tables;


import com.ymm.back.domain.DefaultSchema;
import com.ymm.back.domain.Indexes;
import com.ymm.back.domain.Keys;
import com.ymm.back.domain.tables.records.WorkRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Work extends TableImpl<WorkRecord> {

    private static final long serialVersionUID = 765368391;

    /**
     * The reference instance of <code>work</code>
     */
    public static final Work WORK = new Work();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkRecord> getRecordType() {
        return WorkRecord.class;
    }

    /**
     * The column <code>work.id</code>.
     */
    public final TableField<WorkRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>work.project_id</code>.
     */
    public final TableField<WorkRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>work.member_id</code>.
     */
    public final TableField<WorkRecord, Integer> MEMBER_ID = createField(DSL.name("member_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>work.name</code>.
     */
    public final TableField<WorkRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>work.manager</code>.
     */
    public final TableField<WorkRecord, String> MANAGER = createField(DSL.name("manager"), org.jooq.impl.SQLDataType.VARCHAR(70), this, "");

    /**
     * The column <code>work.status</code>.
     */
    public final TableField<WorkRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>work.color</code>.
     */
    public final TableField<WorkRecord, String> COLOR = createField(DSL.name("color"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>work.started_at</code>.
     */
    public final TableField<WorkRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>work.finished_at</code>.
     */
    public final TableField<WorkRecord, LocalDateTime> FINISHED_AT = createField(DSL.name("finished_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>work.create_time</code>.
     */
    public final TableField<WorkRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>work.update_time</code>.
     */
    public final TableField<WorkRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>work</code> table reference
     */
    public Work() {
        this(DSL.name("work"), null);
    }

    /**
     * Create an aliased <code>work</code> table reference
     */
    public Work(String alias) {
        this(DSL.name(alias), WORK);
    }

    /**
     * Create an aliased <code>work</code> table reference
     */
    public Work(Name alias) {
        this(alias, WORK);
    }

    private Work(Name alias, Table<WorkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Work(Name alias, Table<WorkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Work(Table<O> child, ForeignKey<O, WorkRecord> key) {
        super(child, key, WORK);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORK_FK_WORK_MEMBER1_IDX, Indexes.WORK_FK_WORK_PROJECT1_IDX);
    }

    @Override
    public Identity<WorkRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORK;
    }

    @Override
    public UniqueKey<WorkRecord> getPrimaryKey() {
        return Keys.KEY_WORK_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkRecord>>asList(Keys.KEY_WORK_PRIMARY);
    }

    @Override
    public List<ForeignKey<WorkRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkRecord, ?>>asList(Keys.FK_WORK_PROJECT1, Keys.FK_WORK_MEMBER1);
    }

    public Project project() {
        return new Project(this, Keys.FK_WORK_PROJECT1);
    }

    public ProjectMember projectMember() {
        return new ProjectMember(this, Keys.FK_WORK_MEMBER1);
    }

    @Override
    public Work as(String alias) {
        return new Work(DSL.name(alias), this);
    }

    @Override
    public Work as(Name alias) {
        return new Work(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Work rename(String name) {
        return new Work(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Work rename(Name name) {
        return new Work(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Integer, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
